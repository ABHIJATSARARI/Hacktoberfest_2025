<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Freighter Cargo Loader</title>
    <!-- Load Tailwind CSS CDN for utility classes -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Load Tone.js for sound effects -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.min.js"></script>
    <!-- Load Orbitron font for arcade look -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');
    </style>
    <!-- Tailwind Configuration -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Orbitron', 'sans-serif'],
                    },
                    colors: {
                        'space-dark': '#0f172a', /* slate-900 */
                        'cargo-red': '#ef4444', /* red-500 */
                        'cargo-blue': '#3b82f6', /* blue-500 */
                        'cargo-green': '#10b981', /* emerald-500 */
                        'cargo-yellow': '#fcd34d', /* amber-300 */
                        'cargo-purple': '#a855f7', /* violet-500 */
                        'grid-bg': '#1e293b', /* slate-800 */
                        'highlight': '#f59e0b', /* amber-500 */
                        'empty-cell': '#0f172a',
                    }
                }
            }
        }
    </script>
    <!-- Custom Game CSS -->
    <style>
        /* Base styles */
        body {
            background-color: #0f172a; 
            color: #fcd34d; 
            font-family: 'Orbitron', sans-serif;
            user-select: none;
            touch-action: manipulation;
        }

        /* Freighter Grid Container */
        #freighter-grid {
            width: 95%;
            max-width: 400px;
            aspect-ratio: 1 / 1; /* Ensure square aspect ratio */
            border: 5px solid #3b82f6;
            box-shadow: 0 0 30px rgba(59, 130, 246, 0.7); 
            background-color: #1e293b; 
            margin: 1rem auto;
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            border-radius: 8px;
        }
        
        /* Individual Grid Cells */
        .grid-cell {
            border: 1px solid rgba(255, 255, 255, 0.05);
            background-color: var(--cell-color, #0f172a);
            transition: background-color 0.1s ease;
            cursor: pointer;
        }

        .grid-cell:hover {
            opacity: 0.85;
        }

        /* Piece Colors (used for loaded blocks) */
        .color-0 { background-color: #ef4444; } /* Red */
        .color-1 { background-color: #3b82f6; } /* Blue */
        .color-2 { background-color: #10b981; } /* Green */
        .color-3 { background-color: #fcd34d; } /* Yellow */
        .color-4 { background-color: #a855f7; } /* Purple */

        /* Highlight for preview */
        .preview {
            box-shadow: inset 0 0 0 3px #f59e0b;
        }

        /* Cargo Display */
        #cargo-display {
            background-color: #1f2937;
            border: 2px solid #a855f7;
            border-radius: 8px;
        }

        /* Current Piece Preview Container */
        #piece-preview {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(4, 1fr);
            width: 100px;
            height: 100px;
            border: 1px solid #334155;
            margin: 0 auto;
        }

        .preview-block {
            background-color: var(--block-color);
            border: 1px solid rgba(0, 0, 0, 0.2);
        }

        /* Button styling */
        .game-button {
            font-size: 1rem;
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            border: 2px solid #a855f7;
            background: #1f2937;
            color: #a855f7;
            box-shadow: 0 4px 15px rgba(168, 85, 247, 0.4);
            transition: all 0.15s ease-in-out;
            font-weight: 700;
        }

        .game-button:hover:not(:disabled) {
            background: #a855f7;
            color: #0f172a;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(168, 85, 247, 0.6);
        }

        .game-button:active:not(:disabled) {
            transform: translateY(0);
        }

        .game-button:disabled {
            cursor: not-allowed;
            opacity: 0.6;
        }
    </style>
</head>
<body class="p-4 flex flex-col items-center justify-center min-h-screen">

    <div class="w-full max-w-4xl flex flex-col items-center">
        <h1 class="text-3xl sm:text-4xl font-bold mb-4 text-cargo-blue tracking-wider text-shadow-xl text-center">
            ðŸš€ SPACE FREIGHTER CARGO LOADER ðŸ“¦
        </h1>

        <!-- Stats Display -->
        <div class="w-full max-w-[500px] flex justify-between text-lg sm:text-xl font-mono p-3 rounded-lg bg-gray-800 border-2 border-gray-700 shadow-lg mb-4">
            <span>LEVEL: <span id="level-display" class="text-highlight">1</span></span>
            <span>CARGO LEFT: <span id="cargo-left-display" class="text-cargo-green">0/0</span></span>
            <span>FILLED CELLS: <span id="filled-cells-display" class="text-cargo-red">0/25</span></span>
        </div>

        <!-- Cargo/Controls Section -->
        <div id="cargo-display" class="w-full max-w-[500px] p-4 mb-4 flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0 sm:space-x-4">
            
            <div class="flex flex-col items-center">
                <p class="text-sm text-gray-400 mb-1">CURRENT CARGO (ROTATE)</p>
                <div id="piece-preview" class="mb-2"></div>
                <button id="rotate-button" class="game-button rounded-lg p-2 px-4" disabled>
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.82 2.915 2.1 2.1c.39.39.39 1.023 0 1.414l-2.1 2.1m-2.1-2.1c-.39-.39-1.023-.39-1.414 0l-2.1 2.1m0 0H7m-1.414 1.414l-2.1-2.1c-.39-.39-.39-1.023 0-1.414l2.1-2.1m2.1 2.1c.39.39 1.023.39 1.414 0l2.1-2.1m0 0H17m-1.414-1.414l2.1 2.1c.39.39.39 1.023 0 1.414l-2.1 2.1m0 0H7"></path></svg>
                </button>
            </div>

            <div class="flex flex-col items-center space-y-4">
                <button id="start-button" class="game-button rounded-full">
                    Start Loading
                </button>
                <button id="stop-button" class="game-button rounded-full hidden bg-red-800 border-red-500 text-red-300 hover:bg-red-500 hover:text-white" disabled>
                    Stop Game
                </button>
            </div>
        </div>


        <!-- Freighter Grid Area -->
        <div id="freighter-grid">
            <!-- Grid cells dynamically injected here -->
        </div>
        
        <!-- Status Message -->
        <div class="w-full max-w-[500px] text-center mt-4">
            <p id="status-display" class="text-lg font-bold text-cargo-yellow">Ready</p>
        </div>

        <!-- Game Over / Start Message Modal -->
        <div id="message-modal" class="hidden fixed inset-0 bg-space-dark bg-opacity-90 z-20 items-center justify-center" onclick="hideMessage()">
            <div class="bg-gray-800 p-8 rounded-xl shadow-2xl border-4 border-highlight max-w-md w-full mx-4" onclick="event.stopPropagation()">
                <h2 id="modal-title" class="text-3xl font-bold mb-4 text-highlight">Welcome Pilot</h2>
                <p id="modal-message" class="text-gray-300 mb-6 text-lg">Load all cargo pieces onto the 5x5 grid. Click a grid cell to place the current piece. Rotate it first for a better fit!</p>
                
                <button class="game-button rounded-lg w-full" onclick="hideMessage()">Start Loading</button>
            </div>
        </div>

        <!-- Signature/Credit -->
        <p class="text-xs text-gray-500 mt-6 tracking-widest uppercase">
            Code Signature: abhijat sarari
        </p>
    </div>

    <!-- JavaScript Game Logic -->
    <script>
        // Global Game Variables
        const BOARD_SIZE = 5;
        const TILE_TYPES = 5; // 0 to 4
        
        let score = 0;
        let level = 0;
        let isGameRunning = false;
        let freighterGrid = []; // 2D array: 0 for empty, 1-5 for loaded cargo color/type
        let cargoQueue = [];
        let currentPiece = null; // { type: number, shape: [[x, y], ...], color: string }
        let totalCargo = 0;
        let loadedCargoCount = 0;

        // Cargo piece definitions (Tetromino-like shapes, defined relative to top-left [0,0])
        const PIECE_SHAPES = [
            // L-Shape
            [[0, 0], [1, 0], [2, 0], [2, 1]], 
            // Square
            [[0, 0], [1, 0], [0, 1], [1, 1]],
            // T-Shape
            [[0, 0], [1, 0], [2, 0], [1, 1]],
            // I-Shape (Vertical default)
            [[0, 0], [0, 1], [0, 2], [0, 3]],
            // Z-Shape
            [[0, 0], [1, 0], [1, 1], [2, 1]]
        ];

        const COLOR_CLASSES = ['color-0', 'color-1', 'color-2', 'color-3', 'color-4'];
        
        // DOM Elements
        const gridElement = document.getElementById('freighter-grid');
        const piecePreviewElement = document.getElementById('piece-preview');

        // --- Tone.js Setup for sounds ---
        let placeSynth, rotateSynth, successSynth;
        
        function initAudio() {
            try {
                if (!placeSynth) {
                    Tone.start();
                    placeSynth = new Tone.PluckSynth().toDestination();
                    
                    rotateSynth = new Tone.NoiseSynth().toDestination();
                    rotateSynth.set({ 
                        noise: { type: "pink" }, 
                        envelope: { attack: 0.005, decay: 0.05, sustain: 0 } 
                    });

                    successSynth = new Tone.PolySynth(Tone.Synth).toDestination();
                    successSynth.set({
                        oscillator: { type: "triangle" },
                        envelope: { attack: 0.02, decay: 0.2, sustain: 0.1, release: 0.5 }
                    });
                }
            } catch (e) {
                console.error("Tone.js failed to initialize:", e);
            }
        }

        // Sound functions
        function playPlaceSound() { if (placeSynth) { placeSynth.triggerAttackRelease("G4", "16n"); } }
        function playRotateSound() { if (rotateSynth) { rotateSynth.triggerAttackRelease("16n"); } }
        function playSuccessSound() { if (successSynth) { successSynth.triggerAttackRelease(["C5", "E5", "G5"], "4n"); } }
        function playFailSound() { if (rotateSynth) { rotateSynth.triggerAttackRelease("C1", "8n"); } }

        // --- Game Initialization & Drawing ---

        function generateEmptyGrid() {
            freighterGrid = Array(BOARD_SIZE).fill(0).map(() => Array(BOARD_SIZE).fill(0));
        }

        function generateCargoQueue(numPieces) {
            cargoQueue = [];
            for (let i = 0; i < numPieces; i++) {
                const type = Math.floor(Math.random() * PIECE_SHAPES.length);
                const colorIndex = Math.floor(Math.random() * TILE_TYPES);
                
                cargoQueue.push({ 
                    type: colorIndex + 1, // 1 to 5 (0 is empty)
                    shape: PIECE_SHAPES[type], 
                    colorClass: COLOR_CLASSES[colorIndex] 
                });
            }
            totalCargo = cargoQueue.length;
        }

        function drawGrid() {
            gridElement.innerHTML = '';
            for (let r = 0; r < BOARD_SIZE; r++) {
                for (let c = 0; c < BOARD_SIZE; c++) {
                    const cell = document.createElement('div');
                    cell.classList.add('grid-cell');
                    cell.dataset.row = r;
                    cell.dataset.col = c;
                    
                    // Apply loaded cargo color, or default empty color
                    const cargoType = freighterGrid[r][c];
                    if (cargoType !== 0) {
                        cell.classList.add(COLOR_CLASSES[cargoType - 1]);
                        cell.style.setProperty('--cell-color', COLOR_CLASSES[cargoType - 1]);
                    } else {
                        cell.style.setProperty('--cell-color', 'var(--empty-cell)');
                    }
                    
                    cell.addEventListener('click', handleGridClick);
                    gridElement.appendChild(cell);
                }
            }
        }

        function drawPiecePreview() {
            piecePreviewElement.innerHTML = '';
            // Reset to 4x4 grid
            for (let i = 0; i < 16; i++) {
                const block = document.createElement('div');
                block.classList.add('preview-block');
                block.style.backgroundColor = 'transparent';
                piecePreviewElement.appendChild(block);
            }

            if (!currentPiece) return;

            const color = currentPiece.colorClass;
            
            currentPiece.shape.forEach(([x, y]) => {
                const index = y * 4 + x; // x is column, y is row
                if (index >= 0 && index < 16) {
                    const block = piecePreviewElement.children[index];
                    block.style.setProperty('--block-color', color.replace('color', 'cargo'));
                }
            });
        }
        
        function updateStats() {
            document.getElementById('level-display').textContent = level + 1;
            document.getElementById('cargo-left-display').textContent = `${cargoQueue.length}/${totalCargo}`;
            
            const filled = freighterGrid.flat().filter(c => c !== 0).length;
            document.getElementById('filled-cells-display').textContent = `${filled}/${BOARD_SIZE * BOARD_SIZE}`;
        }

        function nextPiece() {
            if (cargoQueue.length > 0) {
                currentPiece = cargoQueue.shift();
                drawPiecePreview();
                document.getElementById('rotate-button').disabled = false;
                document.getElementById('status-display').textContent = `Loading Cargo ${totalCargo - cargoQueue.length} of ${totalCargo}.`;
            } else {
                currentPiece = null;
                document.getElementById('rotate-button').disabled = true;
                drawPiecePreview();
                
                // Check Win Condition
                if (freighterGrid.flat().every(c => c !== 0)) {
                    endGame("FREIGHTER FULL!", `Level ${level + 1} completed! The cargo bay is fully sealed.`);
                } else {
                    endGame("LEVEL CLEARED", `Level ${level + 1} completed! Ready for transport.`);
                }
            }
            updateStats();
        }

        // --- Piece Manipulation Logic ---

        function rotatePiece() {
            if (!currentPiece) return;
            playRotateSound();
            
            // Simplified 90-degree clockwise rotation (X, Y) -> (Y, -X) relative to the max bounding box size
            
            // 1. Find the piece's bounding box size (B)
            let maxX = 0;
            let maxY = 0;
            currentPiece.shape.forEach(([x, y]) => {
                maxX = Math.max(maxX, x);
                maxY = Math.max(maxY, y);
            });
            // B is the larger of (maxX + 1) or (maxY + 1) to ensure the shape stays within the grid
            const B = Math.max(maxX + 1, maxY + 1); 

            // 2. Apply rotation formula: (x, y) -> (B - 1 - y, x)
            const newShape = currentPiece.shape.map(([x, y]) => {
                return [y, B - 1 - x];
            });
            
            // 3. Normalize the shape (shift points to the top-left [0,0])
            let minX = newShape.reduce((min, [x]) => Math.min(min, x), B);
            let minY = newShape.reduce((min, [x, y]) => Math.min(min, y), B);

            currentPiece.shape = newShape.map(([x, y]) => [x - minX, y - minY]);
            
            drawPiecePreview();
        }

        // --- Placement Logic ---

        function getPreviewCells(startR, startC) {
            if (!currentPiece) return [];
            
            const cells = [];
            currentPiece.shape.forEach(([x, y]) => {
                const r = startR + y;
                const c = startC + x;
                cells.push({r, c});
            });
            return cells;
        }

        function isPlacementValid(startR, startC) {
            if (!currentPiece) return false;

            for (const {r, c} of getPreviewCells(startR, startC)) {
                // Check boundaries
                if (r < 0 || r >= BOARD_SIZE || c < 0 || c >= BOARD_SIZE) {
                    return false;
                }
                // Check collision with existing cargo (0 is empty)
                if (freighterGrid[r][c] !== 0) {
                    return false;
                }
            }
            return true;
        }

        function handleGridClick(event) {
            if (!isGameRunning || !currentPiece) return;

            const r = parseInt(event.currentTarget.dataset.row);
            const c = parseInt(event.currentTarget.dataset.col);

            if (isPlacementValid(r, c)) {
                // Perform placement
                placePiece(r, c);
                // Move to the next piece
                nextPiece();
            } else {
                playFailSound();
                document.getElementById('status-display').textContent = "ERROR: Collision or out of bounds. Try rotating!";
            }
        }

        function placePiece(startR, startC) {
            const cargoType = currentPiece.type;
            for (const {r, c} of getPreviewCells(startR, startC)) {
                freighterGrid[r][c] = cargoType;
                loadedCargoCount++;
            }
            playPlaceSound();
            drawGrid();
        }

        // --- Game Flow ---

        function updateButtonStates(isStarting) {
            document.getElementById('start-button').disabled = isStarting;
            document.getElementById('stop-button').disabled = !isStarting;
            document.getElementById('rotate-button').disabled = !isStarting || !currentPiece;
            gridElement.style.pointerEvents = isStarting ? 'auto' : 'none';

            if (isStarting) {
                 document.getElementById('start-button').textContent = "LOADING...";
                 document.getElementById('stop-button').classList.remove('hidden');
            } else {
                 document.getElementById('start-button').textContent = "Restart Loading";
                 document.getElementById('stop-button').classList.add('hidden');
            }
        }

        function showMessage(title, message) {
            const modal = document.getElementById('message-modal');
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-message').textContent = message;

            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }

        function hideMessage() {
            const modal = document.getElementById('message-modal');
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }
        
        function endGame(title, message) {
            if (!isGameRunning) return;

            isGameRunning = false;
            playSuccessSound(); // Use success sound for level end/victory
            showMessage(title, message + ` Total cargo loaded: ${loadedCargoCount}.`);

            updateButtonStates(false);
        }

        function startGame() {
            // Initialize audio on first click interaction
            initAudio();

            // Reset state
            score = 0;
            level = 0; // Simple single level for now
            loadedCargoCount = 0;
            isGameRunning = true;
            
            generateEmptyGrid();
            // Generate a queue of 15 pieces for the initial challenge
            generateCargoQueue(15); 
            drawGrid();
            
            updateStats();
            hideMessage();
            updateButtonStates(true);
            
            nextPiece(); // Load the first piece
        }

        // --- Event Listeners and Initial Setup ---

        window.onload = function() {
            // Event listeners
            document.getElementById('start-button').addEventListener('click', startGame);
            document.getElementById('stop-button').addEventListener('click', () => endGame("LOADING ABORTED", `Manual shutdown initiated. Loaded cargo: ${loadedCargoCount}.`));
            document.getElementById('rotate-button').addEventListener('click', rotatePiece);
            
            // Initial UI setup
            generateEmptyGrid(); 
            drawGrid(); 
            drawPiecePreview();
            updateButtonStates(false);
            updateStats();
            document.getElementById('cargo-left-display').textContent = `15/15`;
            document.getElementById('status-display').textContent = "Ready";
            showMessage("Welcome Pilot", "Load all cargo pieces onto the 5x5 grid. Click a grid cell to place the current piece. Rotate it first for a better fit!");
        };
    </script>
</body>
</html>
